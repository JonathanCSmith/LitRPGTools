from flask import Flask, redirect, url_for, session, request
from requests_oauthlib import OAuth2Session

# Flask app configuration
app = Flask(__name__)
app.secret_key = 'your_secret_key'
client_id = 'your_patreon_client_id'
client_secret = 'your_patreon_client_secret'
redirect_uri = 'http://yourdomain.com/callback'  # Replace with your callback URL

# Patreon API endpoints
base_authorization_url = 'https://www.patreon.com/oauth2/authorize'
token_url = 'https://www.patreon.com/api/oauth2/token'
api_url = 'https://www.patreon.com/api/oauth2/v2'

# OAuth2 session setup
oauth = OAuth2Session(client_id, redirect_uri=redirect_uri, scope=['identity'])

@app.route('/')
def index():
    auth_url, state = oauth.authorization_url(base_authorization_url)
    session['oauth_state'] = state
    return redirect(auth_url)

@app.route('/callback')
def callback():
    if request.args.get('state') != session.get('oauth_state'):
        return 'Invalid state. Please try again.'

    token = oauth.fetch_token(token_url, client_secret=client_secret,
                              authorization_response=request.url)
    session['oauth_token'] = token

    return redirect(url_for('profile'))

@app.route('/profile')
def profile():
    if 'oauth_token' not in session:
        return redirect(url_for('index'))

    # Retrieve user's profile data from Patreon API
    oauth = OAuth2Session(client_id, token=session['oauth_token'])
    response = oauth.get(f'{api_url}/identity')
    profile_data = response.json()

    # Extract relevant information from the profile_data dictionary
    user_id = profile_data['data']['id']
    user_name = profile_data['data']['attributes']['full_name']
    # ...

    return f'Welcome, {user_name} (ID: {user_id})!'

if __name__ == '__main__':
    app.run(debug=True)


from functools import wraps
from flask import Flask, redirect, render_template, request, session, url_for

app = Flask(__name__)
app.secret_key = 'your_secret_key'

# Sample users and their roles (you can replace it with your own user and role management system)
users = {
    'user1': {
        'password': 'password1',
        'role': 'admin'
    },
    'user2': {
        'password': 'password2',
        'role': 'user'
    }
}



@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']
        if username in users and users[username]['password'] == password:
            session['username'] = username
            return redirect(url_for('dashboard'))
        else:
            return render_template('login.html', error='Invalid username or password')
    return render_template('login.html')

@app.route('/dashboard')
@login_required(role='user')
def dashboard():
    return render_template('dashboard.html')

@app.route('/admin')
@login_required(role='admin')
def admin():
    return render_template('admin.html')

@app.route('/logout')
def logout():
    session.pop('username', None)
    return redirect(url_for('login'))

if __name__ == '__main__':
    app.run(debug=True)


from flask import Flask, redirect, render_template, request, session, url_for
from requests_oauthlib import OAuth2Session

app = Flask(__name__)
app.secret_key = 'your_secret_key'

# Patreon API configuration
client_id = 'your_patreon_client_id'
client_secret = 'your_patreon_client_secret'
redirect_uri = 'http://yourdomain.com/callback'  # Replace with your callback URL
base_authorization_url = 'https://www.patreon.com/oauth2/authorize'
token_url = 'https://www.patreon.com/api/oauth2/token'
api_url = 'https://www.patreon.com/api/oauth2/v2'

# Sample user accounts (you can replace it with your own user management system)
users = {
    'user1': {
        'password': 'password1',
        'patreon_token': None,
        'patreon_data': None
    },
    'user2': {
        'password': 'password2',
        'patreon_token': None,
        'patreon_data': None
    }
}

def login_required(view_func):
    @wraps(view_func)
    def wrapper(*args, **kwargs):
        if 'username' not in session:
            return redirect(url_for('login'))
        return view_func(*args, **kwargs)
    return wrapper

@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']
        if username in users and users[username]['password'] == password:
            session['username'] = username
            return redirect(url_for('dashboard'))
        else:
            return render_template('login.html', error='Invalid username or password')
    return render_template('login.html')

@app.route('/dashboard')
@login_required
def dashboard():
    username = session['username']
    user = users[username]
    patreon_data = user['patreon_data']
    return render_template('dashboard.html', username=username, patreon_data=patreon_data)

@app.route('/patreon/login')
@login_required
def patreon_login():
    username = session['username']
    user = users[username]
    if user['patreon_token']:
        return redirect(url_for('dashboard'))

    oauth = OAuth2Session(client_id, redirect_uri=redirect_uri, scope=['identity'])
    auth_url, state = oauth.authorization_url(base_authorization_url)
    session['oauth_state'] = state
    return redirect(auth_url)

@app.route('/patreon/callback')
@login_required
def patreon_callback():
    username = session['username']
    user = users[username]
    if user['patreon_token']:
        return redirect(url_for('dashboard'))

    if request.args.get('state') != session.get('oauth_state'):
        return 'Invalid state. Please try again.'

    oauth = OAuth2Session(client_id, redirect_uri=redirect_uri)
    token = oauth.fetch_token(token_url, client_secret=client_secret,
                              authorization_response=request.url)
    user['patreon_token'] = token

    # Retrieve user's Patreon data
    oauth = OAuth2Session(client_id, token=token)
    response = oauth.get(f'{api_url}/identity')
    user['patreon_data'] = response.json()

    return redirect(url_for('dashboard'))

@app.route('/logout')
def logout():
    session.pop('username', None)
    return redirect(url_for('login'))

if __name__ == '__main__':
    app.run(debug=True)

